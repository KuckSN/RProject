tail(mtcars,10) ## last 10 rows
anyNA(mtcars)
colSums(is.na(mtcars))
library(ggplot2)
## Install necessary libraries
```{ echo=TRUE}
install.packages("ggplot2");
```
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
summary(mtcars)
?mtcars
names(mtcars) = c("Miles/US Gallon","Number of cylinders", "Displacement", "Gross horsepower", "Rear axle ratio", "Weight(1000lbs)","Quater mile time","Shape of Engine(0 = V, 1 = straight)","Transmission(0 = auto, 1 = manual","Number of forward gears","Number of carburetors");
codebook(mtcars)
View(PlantGrowth)
unique(mtcars$gears)
mtcars$`Number of forward gears`
unique(mtcars$`Number of forward gears`)
aggregate(mtcars$`Number of forward gears`,by=unique(mtcars$`Number of forward gears`))
aggregate(mtcars$`Number of forward gears`,by=unique(mtcars$`Number of forward gears`),FUN=sum)
aggregate(mtcars$`Number of forward gears`,by=as.list(unique(mtcars$`Number of forward gears`)),FUN=sum)
aggregate(as.data.frame(mtcars$`Number of forward gears`),by=as.list(unique(mtcars$`Number of forward gears`)),FUN=sum)
aggregate(mtcars$`Number of forward gears`, FUN=sum)
aggregate(mtcars$`Number of forward gears`, by=list(unique(mtcars$`Number of forward gears`)), by= FUN=sum)
aggregate(mtcars$`Number of forward gears`, by=list(unique(mtcars$`Number of forward gears`)),FUN=sum)
aggregate(mtcars$`Number of forward gears`, by=list(N=unique(mtcars$`Number of forward gears`)),FUN=sum)
table(mtcars$`Number of forward gears`)
table(mtcars$`Number of forward gears`)[0]
table(mtcars$`Number of forward gears`)
as.data.frame(table(mtcars$`Number of forward gears`))
temp = as.data.frame(table(mtcars$`Number of forward gears`))
temp$Var1
temp$Freq
list(temp$Var1)
temp$Var1[0]
temp$Var1
as.list(temp$Var1)
as.vector(temp$Var1)
as.vector(temp$Var1)
as.vector(temp$Freq)
as.vector(temp$Freq).length()
as.vector(temp$Freq).length
length(as.vector(temp$Freq))
length(as.vector(temp$Var1))
# Get frequency by number of of forward gears
temp = as.data.frame(table(mtcars$`Number of forward gears`));
print(length(as.vector(temp$Var1)));
print(length(as.vector(temp$Freq)));
# Get frequency by number of of forward gears
temp = as.data.frame(table(mtcars$`Number of forward gears`));
print(length(as.vector(temp$Var1)));
print(length(as.vector(temp$Freq)));
ggplot(mtcars, aes(x="", y=as.vector(temp$Freq), fill=as.vector(temp$Var1))) + geom_bar(stat="identity", width=1, color="white") + coord_polar("y", start=0) + theme_void()
library(ggplot2)
ggplot(mtcars, aes(x="", y=as.vector(temp$Freq), fill=as.vector(temp$Var1))) + geom_bar(stat="identity", width=1, color="white") + coord_polar("y", start=0) + theme_void()
mtcars$`Weight(1000lbs)`
install.packages("summarytools");
data("mtcars")
?mtcars
---
title: "WIE2003 AA2: EDA on Titanic Dataset"
author: "Lim Wei Xin"
date: "`2/6/2022`"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Introduction
This R markdown is to show EDA on Motor Trend Car Road Tests(mtcars) dataset. The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973â€“74 models).
## Install necessary libraries
```{ echo=TRUE}
install.packages("ggplot2");
install.packages("summarytools");
```
## Load the dataset and necessary libraries
```{r , echo=TRUE}
library(ggplot2);
library(summarytools);
data("mtcars");
```
## Investigating the structure of the data
Before we start doing any plots or advanced work, let us investigate the structure of the data.
### Get the number of observations and variables in the dataset by using dim()
```{r, echo=TRUE}
dim(mtcars)
```
From the output, we can know that this dataset has 32 observations (rows) and 11 variables (columns).
### Get the structure of the dataset by using str()
With ```str()``` , we can observe the datatype of each column in the dataset
```{r, echo=TRUE}
str(mtcars)
```
As we can see, all 11 variables are of ```num``` type.
### Check if there is null data in the dataset
For the ease of analysis afterwards, we need to check and if there is null data in the dataset. If there are, we will perform some procedure to clean up the dataset.
```{r, echo=TRUE}
colSums(is.na(mtcars))
```
As we can see, there isn't exist any null value for each columns in the dataset.
### Display the first 10 rows of data and last 10 rows of data in the dataset
We can start to analyse the dataset by scanning through the first 10 rows and last 10 rows of data.
```{r, echo=TRUE}
head(mtcars,10) ## first 10 rows
tail(mtcars,10) ## last 10 rows
```
### Rename the abbr of each column to their full name to make it more understandable
```{r, echo=TRUE}
names(mtcars) = c("Miles/US Gallon","Number of cylinders", "Engine Displacement(cu.in.)", "Gross horsepower", "Rear axle ratio", "Weight(1000lbs)","Quater mile time","Shape of Engine(0 = V, 1 = straight)","Transmission(0 = auto, 1 = manual)","Number of forward gears","Number of carburetors");
```
Now we can understand what each column is describing about the cars.
### Observe the summary of the dataset
```{r, echo=TRUE}
summary(mtcars)
```
## Plotting the data
Now we can start visualise the data by plotting graphs using different pairs or groups of variable
### Visualising the data using piechart
```{r, echo=TRUE}
# Get frequency by number of forward gears
temp = as.data.frame(table(mtcars$`Number of forward gears`));
ggplot(temp, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Number of forward gears")) +
ggtitle("Percentage of Cars by Number of forward gears") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
```
From above piechart, we can observe that most of the cars (46.88%) has 3 forward gears and only 15.92% of the cars in dataset has 5 forward gears. This observations has given us an insight which is most of the cars in the market during 1974 has only 3 to 4 forward gears in the transmission. 5 forward gears transmissiona is considered rare in the automobile market in the same year.
```{r, echo=TRUE}
# Get frequency by transmission type
temp2 = as.data.frame(table(mtcars$`Transmission(0 = auto, 1 = manual)`));
ggplot(temp2, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Transmission type(0=automatic, 1=manual)")) +
ggtitle("Percentage of Cars by transmission type") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
```
From above piechart, we can observe that 59.38% of the car from the dataset are of manual transmission type and the rest are of automatic transmission type. From the observation, we can clearly see that although the universalisation rate of automatic transmission car is high but manual transmission car still owns the major portion of automobile market in 1974.
### Scatter plotting
```{r, echo=TRUE}
ggplot(mtcars, aes(x=`Gross horsepower`, y=`Miles/US Gallon`)) + geom_point(aes(size=`Engine Displacement(cu.in.)`)) +
ggtitle("Miles/US Gallon vs Gross Horsepower")
```
From the scatter plot above, it is clearly shown that cars with higher gross horse power has lower Miles/US Gallon value, meaning that cars with greater horse power travel less miles in distance per 1 US gallon of fuel. Conversely, cars with lower gross horse power have higher Miles/US Gallon value. We can conclude that higher gross power burns more fuel per miles, which ultimately contribute to lower Miles/US Gallon value.
From the same plot, we can also observe that cars with higher gross horse power generally have greater Engine Displacement.
```{r, echo=TRUE}
ggplot(mtcars, aes(x=`Weight(1000lbs)`, y=`Miles/US Gallon`)) + geom_point(size=2) + ggtitle("Miles/US Gallon vs Weight(1000lbs)")
```
From the scatter plot above, we can see that value of Miles/US Gallon decreases as the weight of the cars increases. This provides us an insight which is heavier cars need to burn more fuels to accelerate, thus causing the distance of heavier car can travel become shorter than lighter car if same amount of fuel is provided.
## Codebook
```{r,echo=FALSE, message=FALSE}
statesSummary <- dfSummary(mtcars, graph.magnify = 7.5)
print(statesSummary, method = "renders")
```
## dplyr package function showcase
For the sake of simplicity, we will rename the column back to the original abbr naming
```{r, echo=TRUE}
data("mtcars")
library(dplyr)
```
### filter() function
filter() function in dplyr is used to filter a dataframe and produce a subset of that dataframe based on the condition set by us.
```{r, echo=TRUE}
filter(mtcars, cyl >= 6);
```
Above code has implemented a filter which will produce a subset of dataframe where only rows with ```cyl``` value that is greater and equal to 6.
### arrange() function
arrange() function will arrange the order of data in dataframe by the value of selected column
```{r, echo=TRUE}
arrange(mtcars, carb);
```
The code above has arranged the dataframe by the value of ```carb``` columns in ascending order.
### mutate() function
mutate() function will add new variables to the dataframe while preserving the previous ones
```{r, echo=TRUE}
mutate(mtcars, halfQsec = qsec/2)
```
The code above add a new variable named "halfQsec" to the dataframe. halfQsec is derived from qsec variable, which it divides every value in qsec by 2. After mutate(), qsec is not altered or removed.
### select() function
select() function will select a column by selected column name
```{r, echo=TRUE}
select(mtcars, drat)
```
The code above select "drat" column from mtcars dataframe
### summarise() function
summarise() creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input.
```{r, echo=TRUE}
mtcars %>% group_by(am) %>% summarise(qsecMean=mean(qsec), qsecMedian=median(qsec), hpMean=mean(hp), hpMedian=median(hp))
```
The code above produce a new dataframe by using group_by(), in this example we group the dataframe by variable "am" which indicates whether the car is automated transmission(1) or mannual transmission (0). Then, the new dataframe produced by group_by() is then pass into summarise(), where a new dataframe containing the sumamrized information of mean and median of ```hp``` (Gross Horse Power) and ```qsec``` (Quater mile time) of the groups.
knitr::opts_chunk$set(echo = TRUE)
dim(mtcars)
### Get the number of observations and variables in the dataset by using dim()
```{r, echo=TRUE}
dim(mtcars)
```
From the output, we can know that this dataset has 32 observations (rows) and 11 variables (columns).
### Get the structure of the dataset by using str()
With ```str()``` , we can observe the datatype of each column in the dataset
```{r, echo=TRUE}
str(mtcars)
```
As we can see, all 11 variables are of ```num``` type.
### Check if there is null data in the dataset
For the ease of analysis afterwards, we need to check and if there is null data in the dataset. If there are, we will perform some procedure to clean up the dataset.
```{r, echo=TRUE}
colSums(is.na(mtcars))
```
As we can see, there isn't exist any null value for each columns in the dataset.
### Display the first 10 rows of data and last 10 rows of data in the dataset
We can start to analyse the dataset by scanning through the first 10 rows and last 10 rows of data.
```{r, echo=TRUE}
head(mtcars,10) ## first 10 rows
tail(mtcars,10) ## last 10 rows
```
### Rename the abbr of each column to their full name to make it more understandable
```{r, echo=TRUE}
names(mtcars) = c("Miles/US Gallon","Number of cylinders", "Engine Displacement(cu.in.)", "Gross horsepower", "Rear axle ratio", "Weight(1000lbs)","Quater mile time","Shape of Engine(0 = V, 1 = straight)","Transmission(0 = auto, 1 = manual)","Number of forward gears","Number of carburetors");
```
Now we can understand what each column is describing about the cars.
### Observe the summary of the dataset
```{r, echo=TRUE}
summary(mtcars)
```
## Plotting the data
Now we can start visualise the data by plotting graphs using different pairs or groups of variable
### Visualising the data using piechart
```{r, echo=TRUE}
# Get frequency by number of forward gears
temp = as.data.frame(table(mtcars$`Number of forward gears`));
ggplot(temp, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Number of forward gears")) +
ggtitle("Percentage of Cars by Number of forward gears") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
```
From above piechart, we can observe that most of the cars (46.88%) has 3 forward gears and only 15.92% of the cars in dataset has 5 forward gears. This observations has given us an insight which is most of the cars in the market during 1974 has only 3 to 4 forward gears in the transmission. 5 forward gears transmissiona is considered rare in the automobile market in the same year.
```{r, echo=TRUE}
# Get frequency by transmission type
temp2 = as.data.frame(table(mtcars$`Transmission(0 = auto, 1 = manual)`));
ggplot(temp2, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Transmission type(0=automatic, 1=manual)")) +
ggtitle("Percentage of Cars by transmission type") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
From above piechart, we can observe that 59.38% of the car from the dataset are of manual transmission type and the rest are of automatic transmission type. From the observation, we can clearly see that although the universalisation rate of automatic transmission car is high but manual transmission car still owns the major portion of automobile market in 1974.
### Scatter plotting
```{r, echo=TRUE}
ggplot(mtcars, aes(x=`Gross horsepower`, y=`Miles/US Gallon`)) + geom_point(aes(size=`Engine Displacement(cu.in.)`)) +
ggtitle("Miles/US Gallon vs Gross Horsepower")
From the scatter plot above, it is clearly shown that cars with higher gross horse power has lower Miles/US Gallon value, meaning that cars with greater horse power travel less miles in distance per 1 US gallon of fuel. Conversely, cars with lower gross horse power have higher Miles/US Gallon value. We can conclude that higher gross power burns more fuel per miles, which ultimately contribute to lower Miles/US Gallon value.
From the same plot, we can also observe that cars with higher gross horse power generally have greater Engine Displacement.
```{r, echo=TRUE}
ggplot(mtcars, aes(x=`Weight(1000lbs)`, y=`Miles/US Gallon`)) + geom_point(size=2) + ggtitle("Miles/US Gallon vs Weight(1000lbs)")
ggplot(mtcars, aes(x=`Weight(1000lbs)`, y=`Miles/US Gallon`)) + geom_point(size=2) + ggtitle("Miles/US Gallon vs Weight(1000lbs)")
From the scatter plot above, we can see that value of Miles/US Gallon decreases as the weight of the cars increases. This provides us an insight which is heavier cars need to burn more fuels to accelerate, thus causing the distance of heavier car can travel become shorter than lighter car if same amount of fuel is provided.
## Codebook
```{r,echo=FALSE, message=FALSE}
statesSummary <- dfSummary(mtcars, graph.magnify = 7.5)
print(statesSummary, method = "renders")
```
## dplyr package function showcase
For the sake of simplicity, we will rename the column back to the original abbr naming
```{r, echo=TRUE}
library(dplyr)
data("mtcars")
library(dplyr)
### filter() function
filter() function in dplyr is used to filter a dataframe and produce a subset of that dataframe based on the condition set by us.
```{r, echo=TRUE}
filter(mtcars, cyl >= 6);
Above code has implemented a filter which will produce a subset of dataframe where only rows with ```cyl``` value that is greater and equal to 6.
### arrange() function
arrange() function will arrange the order of data in dataframe by the value of selected column
```{r, echo=TRUE}
arrange(mtcars, carb);
The code above has arranged the dataframe by the value of ```carb``` columns in ascending order.
### mutate() function
mutate() function will add new variables to the dataframe while preserving the previous ones
```{r, echo=TRUE}
mutate(mtcars, halfQsec = qsec/2)
The code above add a new variable named "halfQsec" to the dataframe. halfQsec is derived from qsec variable, which it divides every value in qsec by 2. After mutate(), qsec is not altered or removed.
### select() function
select() function will select a column by selected column name
```{r, echo=TRUE}
select(mtcars, drat)
The code above select "drat" column from mtcars dataframe
### summarise() function
summarise() creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input.
```{r, echo=TRUE}
mtcars %>% group_by(am) %>% summarise(qsecMean=mean(qsec), qsecMedian=median(qsec), hpMean=mean(hp), hpMedian=median(hp))
The code above produce a new dataframe by using group_by(), in this example we group the dataframe by variable "am" which indicates whether the car is automated transmission(1) or mannual transmission (0). Then, the new dataframe produced by group_by() is then pass into summarise(), where a new dataframe containing the sumamrized information of mean and median of ```hp``` (Gross Horse Power) and ```qsec``` (Quater mile time) of the groups.
The code above produce a new dataframe by using group_by(), in this example we group the dataframe by variable "am" which indicates whether the car is automated transmission(1) or mannual transmission (0). Then, the new dataframe produced by group_by() is then pass into summarise(), where a new dataframe containing the sumamrized information of mean and median of ```hp``` (Gross Horse Power) and ```qsec``` (Quater mile time) of the groups.
install.packages("pdflatex")
---
title: 'WIE2003 AA2: EDA on Mtcars Dataset'
author: "Lim Wei Xin"
date: "`2/6/2022`"
output:
pdf_document: default
html_document: default
---
```{r setup, include=FALSE}
## Install necessary libraries
```{ echo=TRUE}
install.packages("ggplot2");
install.packages("summarytools");
```
## Load the dataset and necessary libraries
```{r , echo=TRUE}
library(ggplot2);
library(summarytools);
data("mtcars");
```
## Investigating the structure of the data
Before we start doing any plots or advanced work, let us investigate the structure of the data.
### Get the number of observations and variables in the dataset by using dim()
```{r, echo=TRUE}
dim(mtcars)
```
From the output, we can know that this dataset has 32 observations (rows) and 11 variables (columns).
### Get the structure of the dataset by using str()
With ```str()``` , we can observe the datatype of each column in the dataset
```{r, echo=TRUE}
str(mtcars)
```
As we can see, all 11 variables are of ```num``` type.
### Check if there is null data in the dataset
For the ease of analysis afterwards, we need to check and if there is null data in the dataset. If there are, we will perform some procedure to clean up the dataset.
```{r, echo=TRUE}
colSums(is.na(mtcars))
```
As we can see, there isn't exist any null value for each columns in the dataset.
### Display the first 10 rows of data and last 10 rows of data in the dataset
We can start to analyse the dataset by scanning through the first 10 rows and last 10 rows of data.
```{r, echo=TRUE}
head(mtcars,10) ## first 10 rows
tail(mtcars,10) ## last 10 rows
```
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Install necessary libraries
```{ echo=TRUE}
install.packages("ggplot2");
install.packages("summarytools");
```
## Load the dataset and necessary libraries
```{r , echo=TRUE}
library(ggplot2);
library(summarytools);
data("mtcars");
```
## Investigating the structure of the data
Before we start doing any plots or advanced work, let us investigate the structure of the data.
### Get the number of observations and variables in the dataset by using dim()
```{r, echo=TRUE}
dim(mtcars)
```
From the output, we can know that this dataset has 32 observations (rows) and 11 variables (columns).
### Get the structure of the dataset by using str()
With ```str()``` , we can observe the datatype of each column in the dataset
```{r, echo=TRUE}
str(mtcars)
```
As we can see, all 11 variables are of ```num``` type.
### Check if there is null data in the dataset
For the ease of analysis afterwards, we need to check and if there is null data in the dataset. If there are, we will perform some procedure to clean up the dataset.
```{r, echo=TRUE}
colSums(is.na(mtcars))
```
As we can see, there isn't exist any null value for each columns in the dataset.
### Display the first 10 rows of data and last 10 rows of data in the dataset
We can start to analyse the dataset by scanning through the first 10 rows and last 10 rows of data.
```{r, echo=TRUE}
head(mtcars,10) ## first 10 rows
tail(mtcars,10) ## last 10 rows
```
### Rename the abbr of each column to their full name to make it more understandable
```{r, echo=TRUE}
names(mtcars) = c("Miles/US Gallon","Number of cylinders", "Engine Displacement(cu.in.)", "Gross horsepower", "Rear axle ratio", "Weight(1000lbs)","Quater mile time","Shape of Engine(0 = V, 1 = straight)","Transmission(0 = auto, 1 = manual)","Number of forward gears","Number of carburetors");
```
Now we can understand what each column is describing about the cars.
### Observe the summary of the dataset
```{r, echo=TRUE}
summary(mtcars)
```
## Plotting the data
Now we can start visualise the data by plotting graphs using different pairs or groups of variable
### Visualising the data using piechart
```{r, echo=TRUE}
# Get frequency by number of forward gears
temp = as.data.frame(table(mtcars$`Number of forward gears`));
ggplot(temp, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Number of forward gears")) +
ggtitle("Percentage of Cars by Number of forward gears") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
```
From above piechart, we can observe that most of the cars (46.88%) has 3 forward gears and only 15.92% of the cars in dataset has 5 forward gears. This observations has given us an insight which is most of the cars in the market during 1974 has only 3 to 4 forward gears in the transmission. 5 forward gears transmissiona is considered rare in the automobile market in the same year.
```{r, echo=TRUE}
ggplot(temp2, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Transmission type(0=automatic, 1=manual)")) +
ggtitle("Percentage of Cars by transmission type") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
From above piechart, we can observe that 59.38% of the car from the dataset are of manual transmission type and the rest are of automatic transmission type. From the observation, we can clearly see that although the universalisation rate of automatic transmission car is high but manual transmission car still owns the major portion of automobile market in 1974.
### Scatter plotting
```{r, echo=TRUE}
ggplot(mtcars, aes(x=`Gross horsepower`, y=`Miles/US Gallon`)) + geom_point(aes(size=`Engine Displacement(cu.in.)`)) +
ggtitle("Miles/US Gallon vs Gross Horsepower")
From the scatter plot above, it is clearly shown that cars with higher gross horse power has lower Miles/US Gallon value, meaning that cars with greater horse power travel less miles in distance per 1 US gallon of fuel. Conversely, cars with lower gross horse power have higher Miles/US Gallon value. We can conclude that higher gross power burns more fuel per miles, which ultimately contribute to lower Miles/US Gallon value.
From the same plot, we can also observe that cars with higher gross horse power generally have greater Engine Displacement.
```{r, echo=TRUE}
From the scatter plot above, we can see that value of Miles/US Gallon decreases as the weight of the cars increases. This provides us an insight which is heavier cars need to burn more fuels to accelerate, thus causing the distance of heavier car can travel become shorter than lighter car if same amount of fuel is provided.
## Codebook
```{r,echo=TRUE, message=FALSE}
statesSummary <- dfSummary(mtcars, graph.magnify = 7.5)
print(statesSummary, method = "renders")
```
## dplyr package function showcase
For the sake of simplicity, we will rename the column back to the original abbr naming
```{r, echo=TRUE}
library(dplyr)
### filter() function
filter() function in dplyr is used to filter a dataframe and produce a subset of that dataframe based on the condition set by us.
```{r, echo=TRUE}
filter(mtcars, cyl >= 6);
Above code has implemented a filter which will produce a subset of dataframe where only rows with ```cyl``` value that is greater and equal to 6.
names(mtcars) = c("Miles/US Gallon","Number of cylinders", "Engine Displacement(cu.in.)", "Gross horsepower", "Rear axle ratio", "Weight(1000lbs)","Quater mile time","Shape of Engine(0 = V, 1 = straight)","Transmission(0 = auto, 1 = manual)","Number of forward gears","Number of carburetors");
### Rename the abbr of each column to their full name to make it more understandable
```{r, echo=TRUE}
names(mtcars) = c("Miles/US Gallon","Number of cylinders", "Engine Displacement(cu.in.)", "Gross horsepower", "Rear axle ratio", "Weight(1000lbs)","Quater mile time","Shape of Engine(0 = V, 1 = straight)","Transmission(0 = auto, 1 = manual)","Number of forward gears","Number of carburetors");
```
Now we can understand what each column is describing about the cars.
### Observe the summary of the dataset
```{r, echo=TRUE}
summary(mtcars)
```
## Plotting the data
Now we can start visualise the data by plotting graphs using different pairs or groups of variable
### Visualising the data using piechart
```{r, echo=TRUE}
# Get frequency by number of forward gears
temp = as.data.frame(table(mtcars$`Number of forward gears`));
ggplot(temp, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Number of forward gears")) +
ggtitle("Percentage of Cars by Number of forward gears") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
```
From above piechart, we can observe that most of the cars (46.88%) has 3 forward gears and only 15.92% of the cars in dataset has 5 forward gears. This observations has given us an insight which is most of the cars in the market during 1974 has only 3 to 4 forward gears in the transmission. 5 forward gears transmissiona is considered rare in the automobile market in the same year.
```{r, echo=TRUE}
ggplot(temp2, aes(x="", y=as.vector(Freq), fill=as.vector(Var1))) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) + theme_void() +
guides(fill=guide_legend(title="Transmission type(0=automatic, 1=manual)")) +
ggtitle("Percentage of Cars by transmission type") +
geom_text(aes(label = paste0(formatC(as.vector(Freq) / sum(Freq) * 100, format = "f", digits = 2), "%")),
position = position_stack(vjust = 0.5))
From above piechart, we can observe that 59.38% of the car from the dataset are of manual transmission type and the rest are of automatic transmission type. From the observation, we can clearly see that although the universalisation rate of automatic transmission car is high but manual transmission car still owns the major portion of automobile market in 1974.
### Scatter plotting
From the scatter plot above, it is clearly shown that cars with higher gross horse power has lower Miles/US Gallon value, meaning that cars with greater horse power travel less miles in distance per 1 US gallon of fuel. Conversely, cars with lower gross horse power have higher Miles/US Gallon value. We can conclude that higher gross power burns more fuel per miles, which ultimately contribute to lower Miles/US Gallon value.
From the same plot, we can also observe that cars with higher gross horse power generally have greater Engine Displacement.
From the scatter plot above, we can see that value of Miles/US Gallon decreases as the weight of the cars increases. This provides us an insight which is heavier cars need to burn more fuels to accelerate, thus causing the distance of heavier car can travel become shorter than lighter car if same amount of fuel is provided.
## Codebook
```{r,echo=TRUE, message=FALSE}
statesSummary <- dfSummary(mtcars, graph.magnify = 7.5)
print(statesSummary, method = "renders")
```
## dplyr package function showcase
For the sake of simplicity, we will rename the column back to the original abbr naming
From the scatter plot above, we can see that value of Miles/US Gallon decreases as the weight of the cars increases. This provides us an insight which is heavier cars need to burn more fuels to accelerate, thus causing the distance of heavier car can travel become shorter than lighter car if same amount of fuel is provided.
## Codebook
```{r,echo=TRUE, message=FALSE}
statesSummary <- dfSummary(mtcars, graph.magnify = 7.5)
print(statesSummary, method = "renders")
```
## dplyr package function showcase
For the sake of simplicity, we will rename the column back to the original abbr naming
### filter() function
filter() function in dplyr is used to filter a dataframe and produce a subset of that dataframe based on the condition set by us.
Above code has implemented a filter which will produce a subset of dataframe where only rows with ```cyl``` value that is greater and equal to 6.
### arrange() function
arrange() function will arrange the order of data in dataframe by the value of selected column
The code above has arranged the dataframe by the value of ```carb``` columns in ascending order.
### mutate() function
mutate() function will add new variables to the dataframe while preserving the previous ones
The code above add a new variable named "halfQsec" to the dataframe. halfQsec is derived from qsec variable, which it divides every value in qsec by 2. After mutate(), qsec is not altered or removed.
### select() function
select() function will select a column by selected column name
The code above select "drat" column from mtcars dataframe
### summarise() function
summarise() creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input.
The code above produce a new dataframe by using group_by(), in this example we group the dataframe by variable "am" which indicates whether the car is automated transmission(1) or mannual transmission (0). Then, the new dataframe produced by group_by() is then pass into summarise(), where a new dataframe containing the sumamrized information of mean and median of ```hp``` (Gross Horse Power) and ```qsec``` (Quater mile time) of the groups.
The code above produce a new dataframe by using group_by(), in this example we group the dataframe by variable "am" which indicates whether the car is automated transmission(1) or mannual transmission (0). Then, the new dataframe produced by group_by() is then pass into summarise(), where a new dataframe containing the sumamrized information of mean and median of ```hp``` (Gross Horse Power) and ```qsec``` (Quater mile time) of the groups.
install.packages(swirl)
shiny::runApp('Git VS/RProject')
