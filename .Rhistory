install.packages("shiny")
install.packages("shinythemes")
install.packages("data.table")
install.packages("RCurl")
install.packages("randomForest")
install.packages("shiny")
install.packages("shinythemes")
install.packages("data.table")
install.packages("RCurl")
install.packages("randomForest")
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(rvest)
library(randomForest)
webpage = read_html("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv")
heading = html_node(webpage, 'body')
# Read data
weather <- read.csv(text = html_text(heading))
weather$outlook <- factor(weather$outlook, levels = c("overcast", "rainy", "sunny"))
weather$play <- factor(weather$play, levels = c("no", "yes"))
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
ui <- fluidPage(theme = shinytheme("united"),
navbarPage("Math Calculator:",
tabPanel("Home",
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
),
tabPanel("About",
titlePanel("About"),
div(includeMarkdown("about.md"),
align="justify")
)
)
)
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
print(test)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
#
#
#fluidRow(
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(rvest)
library(randomForest)
webpage = read_html("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv")
heading = html_node(webpage, 'body')
# Read data
weather <- read.csv(text = html_text(heading))
weather$outlook <- factor(weather$outlook, levels = c("overcast", "rainy", "sunny"))
weather$play <- factor(weather$play, levels = c("no", "yes"))
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
ui <- fluidPage(theme = shinytheme("united"),
navbarPage("Math Calculator:",
tabPanel("Home",
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
),
tabPanel("About",
titlePanel("About"),
div(includeMarkdown("about.md"),
align="justify")
)
)
)
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
print(test)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
#
#
#fluidRow(
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
#
#fluidRow(
#box(title = "", solidHeader = T, width = 8, collapsible = T, plotlyOutput("macro_plot"))
#)
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
install.packages("shiny")
install.packages("shinythemes")
install.packages("data.table")
install.packages("RCurl")
install.packages("randomForest")
install.packages("shiny")
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS')
traceback()
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS')
library(shiny); runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
install.packages("shiny")
install.packages("shinythemes")
install.packages("data.table")
install.packages("shiny")
library(shiny); runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
library(shiny); runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
rfNews()
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
runApp('C:/Users/shiao/Desktop/academic/WIE2003 INTRO TO DS/Math.R')
library(shiny); runApp('GitHub/RProject/Math.R')
runApp('Math.R')
shiny::runApp('powerCalculator')
library(shiny); runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
library(shiny); runApp('GitHub/RProject/Math.R')
library(shiny); runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
runApp('GitHub/RProject/Math.R')
install.packages("plotrix")
library(plotrix)
slices <- c(10,35,18,8)
lbls <- c("P","AP","SL","L")
fan.plot(slices,labels = lbls,main = "Fan Plot - Number of lecturers")
library(plotrix)
slices <- c(10,35,18,8,3)
lbls <- c("Professor","Associate Professor","Senior Lecturer","Lecturer","Tutors")
fan.plot(slices,labels = lbls,main = "Fan Plot - Number of lecturers")
library(shiny); runApp('GitHub/RProject/Math.R')
install.packages("summarytools")
library(summarytools)
knitr::opts_chunk$set(echo = TRUE)
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnif = 7.5)
print(orangeSummary,method="renders")
library(summarytools);
orangeSummary = dfSummary(Orange,graph.magnif = 7.5);
orangeSummary = dfSummary(Orange,graph.magnif = 7.5);
orangeSummary = dfSummary(Orange,graph.magnify = 7.5);
print(orangeSummary,method="renders");
tree1 = filter(Orange,Tree=="1")
View(Orange)
tree1 = filter(Orange,Tree=="1")
tree1 = filter(Orange,Tree =="1")
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
data("Orange")
View(Orange)
summary(Orange)
sum(is.na(Orange))
library (ggplot2)
Orange$Tree = factor(Orange$Tree,levels = c(1,2,3,4,5))
ggplot(Orange, aes(x=Tree, y=circumference)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Trees")
tree1 = filter(Orange,Tree =="1")
library(dplyr)
tree1 = filter(Orange,Tree =="1")
tree2 = filter(Orange,Tree =="2")
tree3 = filter(Orange,Tree =="3")
tree4 = filter(Orange,Tree =="4")
tree5 = filter(Orange,Tree =="5")
ggplot(NULL,aes(age,circumference))+
geom_line(data=tree1,col="green")+
geom_line(data=tree2,col="blue")+
geom_line(data=tree3,col="red")+
geom_line(data=tree4,col="yellow")+
geom_line(data=tree5,col="purple")+
library(dplyr)
tree1 = filter(Orange,Tree =="1")
tree2 = filter(Orange,Tree =="2")
tree3 = filter(Orange,Tree =="3")
tree4 = filter(Orange,Tree =="4")
tree5 = filter(Orange,Tree =="5")
ggplot(NULL,aes(age,circumference))+
geom_line(data=tree1,col="green")+
geom_line(data=tree2,col="blue")+
geom_line(data=tree3,col="red")+
geom_line(data=tree4,col="yellow")+
geom_line(data=tree5,col="purple")
library(dplyr)
tree1 = filter(Orange,Tree =="1")
tree2 = filter(Orange,Tree =="2")
tree3 = filter(Orange,Tree =="3")
tree4 = filter(Orange,Tree =="4")
tree5 = filter(Orange,Tree =="5")
ggplot(NULL,aes(age,circumference))+
geom_line(data=tree1,col="green")+
geom_line(data=tree2,col="blue")+
geom_line(data=tree3,col="red")+
geom_line(data=tree4,col="purple")+
geom_line(data=tree5,col="yellow")
library(dyplr)
library(dplyr)
Orange %>%
group_by(age,Tree) %>%
summarise(mean=mean(circumference)) %>%
ggplot(aes(fill=Tree, age, mean)) +
geom_bar(position = "dodge", stat = "identity") +
xlab("Age (in days)") + ylab("Mean of Circumference") + ggtitle("Mean of Circumference in Difference Age")
data("airquality")
airqClean=na.omit(airquality)
install_tinytex()
tinytex::install_tinytex()
View(df)
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
library(dplyr)
library (ggplot2)
data("Orange")
View(Orange)
summary(Orange)
Orange$Tree = factor(Orange$Tree,levels = c(1,2,3,4,5))
ggplot(Orange, aes(x=Tree, y=circumference)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Trees")
Orange %>%
group_by(age,Tree) %>%
summarise(mean=mean(circumference)) %>%
ggplot(aes(fill=Tree, age, mean)) +
geom_bar(position = "dodge", stat = "identity") +
xlab("Age (in days)") + ylab("Mean of Circumference") + ggtitle("Mean of Circumference in Difference Age")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
library(dplyr)
library (ggplot2)
data("Orange")
View(Orange)
summary(Orange)
sum(is.na(Orange))
Orange$Tree = factor(Orange$Tree,levels = c(1,2,3,4,5))
ggplot(Orange, aes(x=Tree, y=circumference)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Trees")
Orange %>%
group_by(age,Tree) %>%
summarise(mean=mean(circumference)) %>%
ggplot(aes(fill=Tree, age, mean)) +
geom_bar(position = "dodge", stat = "identity") +
xlab("Age (in days)") + ylab("Mean of Circumference") + ggtitle("Mean of Circumference in Difference Age")
ggplot(data=Orange,aes(age,circumference,color=Tree))+geom_point()+scale_color_manual(values=c("1"="red","2"="yellow","3"="purple","4"="blue","5"="green"))
library(dplyr)
tree1 = filter(Orange,Tree =="1")
tree2 = filter(Orange,Tree =="2")
tree3 = filter(Orange,Tree =="3")
tree4 = filter(Orange,Tree =="4")
tree5 = filter(Orange,Tree =="5")
ggplot(NULL,aes(age,circumference))+
geom_line(data=tree1,col="green")+
geom_line(data=tree2,col="blue")+
geom_line(data=tree3,col="red")+
geom_line(data=tree4,col="purple")+
geom_line(data=tree5,col="yellow")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(summarytools)
orangeSummary = dfSummary(Orange,graph.magnify = 7.5)
print(orangeSummary,method="renders")
library(magick)
character <- c("subtract_indexes", 'leftP_indexes', "rightP_indexes", "plus_indexes", "equal_indexes", "zero_indexes", "one_indexes",
"two_indexes", "three_indexes", "four_indexes", "five_indexes", "six_indexes", 'seven_indexes', "eight_indexes",
"nine_indexes", "div_indexes", "mul_indexes")
regex <- c("-", "\\(", ")", "\\+", "=", "0", "1", "2", "3", "4", "5","6", "7","8","9", "div", "X")
character_list <- list("-" = subtract_indexes, "(" = leftP_indexes, ")" = rightP_indexes,
"+"= plus_indexes, "=" = equal_indexes, "0" = zero_indexes, "1" = one_indexes,
"2" = two_indexes, "3" = three_indexes, "4" = four_indexes, "5" = five_indexes,
"6" = six_indexes, "7" = seven_indexes, "8" = eight_indexes, "9" = nine_indexes,
"x" = mul_indexes, "/" = div_indexes)
#Process image into vector
for(file in list.files(path = "C:\\Users\\kuckn\\Desktop\\Usable Data")) {
current_file <- file
print(paste("Processing:", file, sep=" "))
for(images in list.files(paste("C:\\Users\\kuckn\\Desktop\\Usable Data", "\\", current_file, sep = ""), full.names = TRUE)) {
current_image <- image_read(images)
current_image_data <- as.numeric(current_image[[1]][1, , ])
data_matrix <- rbind(data_matrix, current_image_data)
y_matrix <- rbind(y_matrix, file)
row.names(data_matrix)[nrow(data_matrix)] <- file
}
}
shiny::runApp('GitHub/RProject')
shiny::runApp('GitHub/RProject')
